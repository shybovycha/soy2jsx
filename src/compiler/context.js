class Context {
    constructor(type, parent) {
        this.parent = parent;
        this.type = type;
    }

    createContext(ctxType) {
        const ctx = new Context(ctxType, this);

        return ctx;
    }

    findParent(ctxType) {
        if (this.type === ctxType) {
            return this;
        }

        if (!this.parent) {
            return null;
        }

        return this.parent.findParent(ctxType);
    }

    addPropertyElement(property, value) {
        if (!this[property]) {
            this[property] = [];
        }

        this[property].push(value);
    }

    addPropertyElements(property, values) {
        if (!this[property]) {
            this[property] = [];
        }

        this[property] = this[property].concat(values);
    }

    setProperty(property, value) {
        this[property] = value;
    }
}

const ContextType = {
    SOY_FILE: 'SOY_FILE',
    NAMESPACE: 'NAMESPACE',
    NAMESPACE_NAME: 'NAMESPACE_NAME',
    TEMPLATE_DECLARATION: 'TEMPLATE',
    TEMPLATE_NAME: 'TEMPLATE_NAME',
    TEMPLATE_COMMENT: 'TEMPLATE_COMMENT',
    TEMPLATE: 'TEMPLATE',
    TEMPLATE_ELEMENT: 'TEMPLATE_ELEMENT',
    VARIABLE_DECLARATION: 'VARIABLE_DECLARATION',
    HTML_ELEMENT_ATTRIBUTE: 'HTML_ELEMENT_ATTRIBUTE',
    HTML_ELEMENT_CHILD: 'HTML_ELEMENT_CHILD',
    CALL_EXPRESSION_ARGUMENT: 'CALL_EXPRESSION_ARGUMENT',
    CALL_EXPRESSION: 'CALL_EXPRESSION',
    FOREACH_BODY: 'FOREACH_BODY',
    FOREACH_RANGE: 'FOREACH_RANGE',
    CALL_EXPRESSION_CALLEE: 'CALL_EXPRESSION_CALLEE',
    SWITCH_OPERATOR_EXPRESSION: 'SWITCH_OPERATOR_EXPRESSION',
    SWITCH_OPERATOR_CASE: 'SWITCH_OPERATOR_CASE',
    SWITCH_OPERATOR_CASE_TEST: 'SWITCH_OPERATOR_CASE_TEST',
    SWITCH_OPERATOR_CASE_BODY: 'SWITCH_OPERATOR_CASE_BODY',
    INTERPOLATED_EXPRESSION_EXPRESSION: 'INTERPOLATED_EXPRESSION_EXPRESSION',
    CONDITIONAL_EXPRESSION_EXPRESSION: 'CONDITIONAL_EXPRESSION_EXPRESSION',
    VARIABLE_REFERENCE: 'VARIABLE_REFERENCE',
    FILTER: 'FILTER',
    TEMPLATE_CALL_ARGUMENT: 'TEMPLATE_CALL_ARGUMENT',
    CONDITIONAL_EXPRESSION_BRANCH: 'CONDITIONAL_EXPRESSION_BRANCH',
    CONDITIONAL_EXPRESSION_BODY: 'CONDITIONAL_EXPRESSION_BODY',
    PROPERTY_KEY: 'PROPERTY_KEY',
    PROPERTY_VALUE: 'PROPERTY_VALUE',
    OBJECT_EXPRESSION_PROPERTY: 'OBJECT_EXPRESSION_PROPERTY',
    COMMENT_TEXT: 'COMMENT_TEXT',
    BINARY_OPERATOR_ARGUMENT: 'BINARY_OPERATOR_ARGUMENT',
    UNARY_OPERATOR_ARGUMENT: 'UNARY_OPERATOR_ARGUMENT',
    HTML_ELEMENT_ATTRIBUTE_VALUE: 'HTML_ELEMENT_ATTRIBUTE_VALUE',
    INTERPOLATED_EXPRESSION: 'INTERPOLATED_EXPRESSION',
    STRING_INTERPOLATED_EXPRESSION: 'STRING_INTERPOLATED_EXPRESSION',
    ASSIGNMENT_EXPRESSION_ARGUMENT: 'ASSIGNMENT_EXPRESSION_ARGUMENT',
    GENERATED_ATTRIBUTE: 'GENERATED_ATTRIBUTE',
    GENERATED_ATTRIBUTE_NAME: 'GENERATED_ATTRIBUTE_NAME',
    GENERATED_ATTRIBUTE_VALUE: 'GENERATED_ATTRIBUTE_VALUE',
    MEMBER_EXPRESSION_CHILD: 'MEMBER_EXPRESSION_CHILD',
    IF_STATEMENT_BODY: 'IF_STATEMENT_BODY',
    ARRAY_ELEMENT: 'ARRAY_ELEMENT',
};

module.exports = { ContextType, Context };
