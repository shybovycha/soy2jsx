{namespace ServiceDesk.Templates.Agent.Customer}
{template .requestTypeWorkflowStatusesEditForm}
<form class="aui top-label vp-form" method="post">
    <div class="form-body">
        <table class="form-table" cellspacing="0" cellpadding="0">
            <thead>
            <tr>
                <th>
                    <div data-intro="{getText('sd.featuretour.portal.workflow.status.jira')}" data-position="bottom">
                        {getText('sd.admin.request.workflow.status.issue.label')}
                        <a href="{contextPath()}/plugins/servlet/project-config/{$projectKey}/issuetypes/{$issueTypeId}/workflow">{getText('sd.admin.request.view.workflow.in.jira')}</a>
                    </div>
                </th>
                <th>
                    <div data-intro="{getText('sd.featuretour.portal.workflow.status.customer')}" data-position="bottom">
                        {getText('sd.admin.request.workflow.status.request.label')}
                    </div>
                </th>
            </tr>
            </thead>
            <tbody>
                {foreach $s in $statuses}
                <tr>
                    <td class="label">
                        <label for="workflowStatus:{$s.id}">
                            {$s.original}
                        </label>
                    </td>
                    <td>
                        <input type="text" class="text medium-field" name="workflowStatus:{$s.id}" id="workflowStatus:{$s.id}" value="{$s.custom}" placeholder="{$s.original}" />
                        {if $s.error}
                            <div class="error">{$s.error}</div>
                        {/if}
                    </td>
                </tr>
                {/foreach}
            </tbody>
        </table>
        <div class="buttons-container form-footer">
            <div class="buttons">
                <input accesskey="{getText('AUI.form.submit.button.accesskey')}" class="button" name="create" title="{getText('AUI.form.submit.button.tooltip', getText('AUI.form.submit.button.accesskey'), $modifierKey)}" type="submit" value="{getText('common.words.save')}">
                <button type="button" accesskey="{getText('AUI.form.cancel.link.accesskey')}" class="cancel aui-button aui-button-link" title="{getText('AUI.form.cancel.link.tooltip', getText('AUI.form.cancel.link.accesskey'), $modifierKey)}">{getText('sd.admin.standard.form.discard')}</button>
            </div>
        </div>
    </div>
</form>
{/template}


/**
 * Render dialog for providing default value
 * @param submitUrl action url for the form
 * @param editHtml edit html for the form field
 * @param isHideAction says whether popup is triggered after a 'Hide field' action or after a 'Set value'.
 * @param modifierKey
 */
{template .defaultValueDialog}
    <form action="{$submitUrl}" class="aui" method="post">
        <div class="form-body">
            <h2 class="dialog-title">
            {if $isHideAction}
                {getText('sd.admin.request.fields.value.dialog.hide.field.header')}
            {else}
                {getText('sd.admin.request.fields.value.dialog.set.value.header')}
            {/if}
            </h2>
            <p class="sd-set-hidden-value-info">{getText('sd.admin.request.fields.value.dialog.info')}</p>
            {$editHtml |noAutoescape}
        </div>
        <div class="buttons-container form-footer">
            <div class="buttons">
                <input accesskey="{getText('AUI.form.submit.button.accesskey')}" class="button" name="submit" title="{getText('AUI.form.submit.button.tooltip', getText('AUI.form.submit.button.accesskey'), $modifierKey)}" type="submit" value="{getText('sd.admin.request.fields.value.dialog.submit')}">
                <a accesskey="{getText('AUI.form.cancel.link.accesskey')}" class="cancel" href="#" title="{getText('AUI.form.cancel.link.tooltip', getText('AUI.form.cancel.link.accesskey'), $modifierKey)}">{getText('AUI.form.cancel.link.text')}</a>
            </div>
        </div>
    </form>
{/template}

/**
 * error message
 * @param message
 */
{template .requestTypeErrorMessage}
    {call aui.message.error}
        {param content: $message /}
    {/call}
{/template}
